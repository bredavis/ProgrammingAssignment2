makeCacheMatrix <- function(x = matrix()) {#
   s <- NULL#
   set <- function(y) {#
   	x <<- y#
   	s <<- NULL#
   }#
   get <- function() { x } #
   setsolve <- function(solve)  { s <<- solve }#
   getsolve <- function() { s } #
   list(get = get, setsolve = setsolve, getsolve = setsolve)#
}#
## Using the object x, which was created by makeCacheMatrix, cacheSolve#
## accesses x adn gets the value of the solve. If the inverse was#
## already cached, it will send the message "getting cached data" and#
## return the inverse. If s is NULL, then it will run solve to find #
## the inverse and then cache the result.#
#
cacheSolve <- function(x, ...) {#
	s <- x$getsolve()#
	if(!is.null(s)) {#
		message("getting cached data")#
		return(s)#
	}#
	data <- x$get()#
	s <- solve(data,...)#
	x$setsolve(s)#
	s#
}
mat <- matrix(1:100,10,10)
mat
makeCacheMatrix(mat)
makeCacheMatrix(mat)
mat
makeCacheMatrix(mat)
makeCacheMatrix()
